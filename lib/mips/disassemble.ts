export enum Field {
  op,
  s,
  t,
  d,
  ft,
  fs,
  fd,
  sh,
  fmt,
  brop,
  pos,
  size,
  i,
  func,
  j,
}
const fields: Record<Field, (n: number) => number> = {
  [Field.op]: (n) => (n >> 26) & 0x3f,
  [Field.s]: (n) => (n >> 21) & 0x1f,
  [Field.t]: (n) => (n >> 16) & 0x1f,
  [Field.d]: (n) => (n >> 11) & 0x1f,
  [Field.ft]: (n) => (n >> 16) & 0x1f,
  [Field.fs]: (n) => (n >> 11) & 0x1f,
  [Field.fd]: (n) => (n >> 6) & 0x1f,
  [Field.sh]: (n) => (n >> 6) & 0x1f,
  [Field.fmt]: (n) => (n >> 21) & 0x1f,
  [Field.brop]: (n) => (n >> 16) & 0x1f,
  [Field.pos]: (n) => (n >> 6) & 0x1f,
  [Field.size]: (n) => (n >> 11) & 0x1f,
  [Field.i]: (n) => n & 0xffff,
  [Field.func]: (n) => n & 0x3f,
  [Field.j]: (n) => n & 0x3fffffff,
};

const ops = [
  [
    "func",
    "branch",
    "j",
    "jal",
    "beq",
    "bne",
    "blez",
    "bgtz",
    "addi",
    "addiu",
    "slti",
    "sltiu",
    "andi",
    "ori",
    "xori",
    "lui",
  ],
  [
    "cp0",
    "cp1",
    "",
    "",
    "beql",
    "bnel",
    "blezl",
    "bgtzl",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "bits",
  ],
  [
    "lb",
    "lh",
    "lwl",
    "lw",
    "lbu",
    "lhu",
    "lwr",
    "",
    "sb",
    "sh",
    "swl",
    "sw",
    "",
    "",
    "swr",
    "",
  ],
  ["", "lwc1", "", "", "", "", "", "", "", "swc1", "", "", "", "", "", ""],
];
const func = [
  [
    "sll",
    "",
    "srl",
    "sra",
    "sllv",
    "",
    "srlv",
    "srav",
    "jr",
    "jalr",
    "movz",
    "movn",
    "syscall",
    "break",
    "",
    "",
  ],
  [
    "mfhi",
    "mthi",
    "mflo",
    "mtlo",
    "",
    "",
    "clz",
    "clo",
    "mult",
    "multu",
    "div",
    "divu",
    "madd",
    "maddu",
    "",
    "",
  ],
  [
    "add",
    "addu",
    "sub",
    "subu",
    "and",
    "or",
    "xor",
    "nor",
    "",
    "",
    "slt",
    "sltu",
    "max",
    "min",
    "msub",
    "msubu",
  ],
  ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
]; //func
const branch = [
  [
    "bltz",
    "bgez",
    "bltzl",
    "bgezl",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
  ],
  [
    "bltzal",
    "bgezal",
    "bltzall",
    "bgezll",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
  ],
]; //brop
const bits = [
  ["ext", "", "", "", "ins", "", "", "", "", "", "", "", "", "", "", ""],
  ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
  ["bitext", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
  ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
]; //func
const bitext = [
  ["", "", "wsbh", "wsbw", "", "", "", "", "", "", "", "", "", "", "", ""],
  ["seb", "", "", "", "bitrev", "", "", "", "seh", "", "", "", "", "", "", ""],
]; //sh
const cp0 = [
  [
    "add.s",
    "sub.s",
    "mul.s",
    "div.s",
    "sqrt.s",
    "abs.s",
    "mov.s",
    "neg.s",
    "fbranch",
    "",
    "",
    "",
    "round.s",
    "trunc.s",
    "ceil.s",
    "floor.s",
  ],
  ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
  [
    "cvt.s.w",
    "",
    "",
    "",
    "cvt.w.s",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
  ],
  [
    "c.f",
    "c.un",
    "c.eq",
    "c.ueq",
    "c.olt",
    "c.ult",
    "c.ole",
    "c.ule",
    "c.sf",
    "c.ngle",
    "c.seq",
    "c.ngl",
    "c.lt",
    "c.nge",
    "c.le",
    "c.ngt",
  ],
]; //func
const fbranch = [["bc1f", "bc1t", "bc1fl", "bc1tl"]]; //fmt
const cp1 = [["mfc1", "", "cfc1", "", "mtc1", "", "ctc1", ""]]; //fmt

const opMapper: Record<string, string[][]> = {
  ops,
  func,
  branch,
  bits,
  bitext,
  cp0,
  fbranch,
  cp1,
};
const opMapperField: Record<string, Field> = {
  ops: Field.op,
  func: Field.func,
  branch: Field.brop,
  bits: Field.func,
  bitext: Field.sh,
  cp0: Field.fmt,
  cp1: Field.fmt,
  fbranch: Field.fmt,
};

const jType = [Field.j];
const iType = [Field.s, Field.t, Field.i];
const shType = [Field.d, Field.t, Field.sh];
const rType = [Field.d, Field.t, Field.s];
const fType = [Field.ft, Field.fd, Field.fs];

const opFields: Record<string, Field[]> = {
  j: jType,
  jal: jType,
  beq: iType,
  bne: iType,
  blez: iType,
  bgtz: iType,
  addi: iType,
  addiu: iType,
  slti: iType,
  sltiu: iType,
  andi: iType,
  ori: iType,
  xori: iType,
  lui: iType,
  beql: iType,
  bnel: iType,
  blezl: iType,
  bgtzl: iType,
  lb: iType,
  lh: iType,
  lwl: iType,
  lw: iType,
  lhu: iType,
  lwr: iType,
  sb: iType,
  sh: iType,
  swl: iType,
  sw: iType,
  swr: iType,
  sll: shType,
  srl: shType,
  sra: shType,
  sllv: rType,
  srlv: rType,
  srav: rType,
  jr: rType,
  jalr: rType,
  movz: rType,
  movn: rType,
  syscall: [Field.j],
  break: [Field.j],
  mfhi: rType,
  mth: rType,
  mflo: rType,
  mtlo: rType,
  clz: rType,
  clo: rType,
  mult: rType,
  multu: rType,
  div: rType,
  divu: rType,
  madd: rType,
  maddu: rType,
  add: rType,
  addu: rType,
  sub: rType,
  subu: rType,
  and: rType,
  or: rType,
  xor: rType,
  nor: rType,
  slt: rType,
  sltu: rType,
  max: rType,
  msub: rType,
  msubu: rType,
  ext: [Field.t, Field.s, Field.pos, Field.size],
  ins: [Field.t, Field.s, Field.pos, Field.size],
  lwc1: [Field.ft, Field.s, Field.i],
  swc1: [Field.ft, Field.s, Field.i],
  mfc1: [Field.t, Field.fs],
  cfc1: [Field.t, Field.fs],
  mtc1: [Field.t, Field.fs],
  ctc1: [Field.t, Field.fs],
  bltz: [Field.s, Field.i],
  bgez: [Field.s, Field.i],
  bltzl: [Field.s, Field.i],
  bgezl: [Field.s, Field.i],
  bltzal: [Field.s, Field.i],
  bgezal: [Field.s, Field.i],
  bltzall: [Field.s, Field.i],
  bgezall: [Field.s, Field.i],
  bc1f: [Field.i],
  bc1t: [Field.i],
  bc1fl: [Field.i],
  bc1tl: [Field.i],
  "add.s": fType,
  "sub.s": fType,
  "mul.s": fType,
  "div.s": fType,
  "sqrt.s": fType,
  "abs.s": fType,
  "mov.s": fType,
  "neg.s": fType,
  "round.s": fType,
  "trunc.s": fType,
  "ceil.s": fType,
  "floor.s": fType,
  "cvt.w.s": fType,
  "cvt.s.w": fType,
  c_f: fType,
  c_en: fType,
  c_eq: fType,
  c_ueq: fType,
  c_olt: fType,
  c_ult: fType,
  c_ole: fType,
  c_ule: fType,
  c_sf: fType,
  c_ngle: fType,
  c_seq: fType,
  c_ngl: fType,
  c_lt: fType,
  c_nge: fType,
  c_le: fType,
  c_ngt: fType,
  wsbh: [Field.d, Field.t],
  wsdw: [Field.d, Field.t],
  seb: [Field.d, Field.t],
  bitrev: [Field.d, Field.t],
  seh: [Field.d, Field.t],
};

export const disassemble = (instr: number, ignoreImmediate: boolean) => {
  if (instr == 0) return { op: "nop", args: [] };
  let iname = "ops";
  //   let op = fields[Field.op](instr);
  while (opMapper[iname] !== undefined) {
    let op = fields[opMapperField[iname]](instr);
    iname = opMapper[iname][op >> 4]?.[op & 0xf];
  }
  let args = opFields[iname] ?? [];
  if (ignoreImmediate) args = args.filter((a) => a != Field.i && a != Field.j);
  //   console.log(args.map(a=>Field[a]))
  if (iname == "") {
    iname = `unk_${instr.toString(16)}`;
  }
  return {
    op: iname,
    args: args.map((a) => fields[a](instr)),
  };
};
